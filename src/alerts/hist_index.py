import urllib
from datetime import datetime
import sys


def parse_data(x):
    
    idx= x[0] 
    url= x[1]
    tdate = x[2]
    right=x[3]
    lower_bound = x[4]
    upper_bound = x[5]
    ln = urllib.urlopen(url).readlines()
    months = {'JAN':'01', 'FEB':'02', 'MAR':'03', 'APR':'04', 'MAY':'05', 'JUN':'06', 
              'JUL':'07', 'AUG':'08', 'SEP':'09', 'OCT':'10', 'NOV':'11', 'DEC':'12'}
    

    volumes= map(lambda x: ('%s%s' % (x[4:6], months[x[0:3]]), 
                            int(x[8:13]), x[14:15], int(x[70:80])), filter(lambda x:x[0:3] in list(months.keys()), ln))
#     for t in volumes:
#         print t
    
    
    
    #xc_minus1p = filter(lambda x: x[1] < idx and x[1] > idx * 0.99, volumes)
    opt_range = filter(lambda x: x[1] > idx * lower_bound and x[1] < idx * upper_bound, volumes)#     for t in xc_minus2p:
#         print t
    
    opt_range_set = set(map(lambda x:x[0], opt_range))
#     print opt_range
#     print opt_range_set
 
    opt_on_day =[]
    for m in opt_range_set:
        #print reduce(lambda x,y:x[3]+y[3], filter(lambda x: x[0] == m and x[2] == 'P' , xc_minus2p))
        
        f1= map(lambda x:x[3], filter(lambda x: x[0] == m and x[2] == right , opt_range))
        
        opt_on_day.append((tdate, m, reduce(lambda x,y:x+y, f1)))
        opt_on_day = sorted(opt_on_day)
    return opt_on_day


def day_series(sname, s1, head=False):
    if head:
        print "['series', %s]," % ''.join("'%s'," % v[0] for v in s1) 
    print "['%s', %s]," % (sname, ''.join('%d,' % v[1] for v in s1))
    
def donut(s1, s2): 
    print "['Right', 'Num Contracts'],"
    print "['Call', %d], ['Put', %d]," % (s1, s2)


def gen_dd(x):
    print "['%s', %s]," % ('series', ''.join("'%s'," % v[1] for v in x[0]))
    len1 = len(x[0])
    for a in sorted(x):
        #print "['%s', %s]," % (sumC[0][0][0], ''.join('%d,' % v[2] for v in sumC[0]))
        print "['%s', %s]," % (a[0][0], ''.join('%d,' % v[2] for v in a[0:len1]))

def generate_run_config():
    hsi = [('Apr 28, 2017',24615.13),
            ('Apr 27, 2017',24698.48),
            ('Apr 26, 2017',24578.43),
            ('Apr 25, 2017',24455.94),
            ('Apr 24, 2017',24139.48),
            ('Apr 21, 2017',24042.02),
            ('Apr 20, 2017',24056.98),
            ('Apr 19, 2017',23825.88),
            ('Apr 18, 2017',23924.54),
            ('Apr 13, 2017',24261.66),
            ('Apr 12, 2017',24313.5),
            ('Apr 11, 2017',24088.46),
            ('Apr 10, 2017',24262.18),
            ('Apr 7, 2017',24267.3),
            ('Apr 6, 2017',24273.72),
            ('Apr 5, 2017',24400.8),
            ('Apr 3, 2017',24261.48)]

    url = 'https://www.hkex.com.hk/eng/stat/dmstat/dayrpt/hsio%s.htm'
    run1 = sorted(map(lambda x: (x[1], datetime.strptime(x[0], '%b %d, %Y').strftime('%y%m%d'),  
                   url % datetime.strptime(x[0], '%b %d, %Y').strftime('%y%m%d')), hsi))

    lower_bound = 0.995
    upper_bound = 1.005
    # (index, url, tdate, right, lower_bound, upper_bound)
    
    runC=  map(lambda x:(x[0], x[2], x[1], 'C', lower_bound, upper_bound, ), run1)
    runP=  map(lambda x:(x[0], x[2], x[1], 'P', lower_bound, upper_bound, ), run1)
 
    print runC   
    # (tdate, opt_month, num_contracts)    
    #sumC = map(parse_data, runC)    
    sumC = [[('170419', '1704', 1528), ('170419', '1705', 335), ('170419', '1706', 296), ('170419', '1707', 64), ('170419', '1709', 855), ('170419', '1712', 805), ('170419', '1803', 0)], [('170418', '1704', 1513), ('170418', '1705', 1019), ('170418', '1706', 1322), ('170418', '1707', 229), ('170418', '1709', 1499), ('170418', '1712', 4578), ('170418', '1803', 0), ('170418', '1806', 839), ('170418', '1812', 3008), ('170418', '1906', 100), ('170418', '1912', 120), ('170418', '2006', 22)], [('170421', '1704', 1589), ('170421', '1705', 1454), ('170421', '1706', 1404), ('170421', '1707', 237), ('170421', '1709', 1495), ('170421', '1712', 4559), ('170421', '1803', 0), ('170421', '1806', 839), ('170421', '1812', 3258), ('170421', '1906', 100), ('170421', '1912', 120), ('170421', '2006', 22)], [('170420', '1704', 1618), ('170420', '1705', 1344), ('170420', '1706', 1357), ('170420', '1707', 237), ('170420', '1709', 1499), ('170420', '1712', 4579), ('170420', '1803', 0), ('170420', '1806', 839), ('170420', '1812', 3008), ('170420', '1906', 100), ('170420', '1912', 120), ('170420', '2006', 22)], [('170411', '1704', 4657), ('170411', '1705', 1884), ('170411', '1706', 1709), ('170411', '1707', 258), ('170411', '1709', 1907), ('170411', '1712', 6271), ('170411', '1803', 0), ('170411', '1806', 831), ('170411', '1812', 3008), ('170411', '1906', 100), ('170411', '1912', 120), ('170411', '2006', 22)], [('170424', '1704', 3703), ('170424', '1705', 1453), ('170424', '1706', 666), ('170424', '1707', 31), ('170424', '1709', 795), ('170424', '1712', 1644), ('170424', '1803', 0)], [('170403', '1704', 2478), ('170403', '1705', 931), ('170403', '1706', 256), ('170403', '1707', 0), ('170403', '1709', 557), ('170403', '1712', 1353), ('170403', '1803', 0)], [('170413', '1704', 3322), ('170413', '1705', 1255), ('170413', '1706', 430), ('170413', '1707', 28), ('170413', '1709', 558), ('170413', '1712', 1628), ('170413', '1803', 0)], [('170410', '1704', 3391), ('170410', '1705', 1087), ('170410', '1706', 393), ('170410', '1707', 28), ('170410', '1709', 558), ('170410', '1712', 1628), ('170410', '1803', 0)], [('170407', '1704', 3429), ('170407', '1705', 1098), ('170407', '1706', 355), ('170407', '1707', 25), ('170407', '1709', 558), ('170407', '1712', 1628), ('170407', '1803', 0)], [('170406', '1704', 2617), ('170406', '1705', 1028), ('170406', '1706', 359), ('170406', '1707', 13), ('170406', '1709', 559), ('170406', '1712', 1478), ('170406', '1803', 0)], [('170412', '1704', 6152), ('170412', '1705', 1966), ('170412', '1706', 1306), ('170412', '1707', 101), ('170412', '1709', 688), ('170412', '1712', 3298), ('170412', '1803', 0)], [('170405', '1704', 2175), ('170405', '1705', 585), ('170405', '1706', 547), ('170405', '1707', 67), ('170405', '1709', 105), ('170405', '1712', 1670), ('170405', '1803', 0)], [('170425', '1704', 2639), ('170425', '1705', 1209), ('170425', '1706', 1107), ('170425', '1707', 73), ('170425', '1709', 101), ('170425', '1712', 1766), ('170425', '1803', 0)], [('170426', '1704', 2681), ('170426', '1705', 1738), ('170426', '1706', 1014), ('170426', '1707', 41), ('170426', '1709', 56), ('170426', '1712', 1710), ('170426', '1803', 2)], [('170428', '1705', 2334), ('170428', '1706', 1072), ('170428', '1707', 49), ('170428', '1708', 0), ('170428', '1709', 57), ('170428', '1712', 1710), ('170428', '1803', 2)], [('170427', '1704', 3531), ('170427', '1705', 3213), ('170427', '1706', 2707), ('170427', '1707', 169), ('170427', '1709', 185), ('170427', '1712', 1726), ('170427', '1803', 2)]]
    print sumC
    print '>>>BEGIN COPY'
    gen_dd(sumC)
    print '<<<END COPY'
    
    #sumP = map(parse_data, runP)
    sumP = [[('170419', '1704', 3077), ('170419', '1705', 846), ('170419', '1706', 443), ('170419', '1707', 70), ('170419', '1709', 860), ('170419', '1712', 710), ('170419', '1803', 0)], [('170418', '1704', 3327), ('170418', '1705', 1603), ('170418', '1706', 466), ('170418', '1707', 266), ('170418', '1709', 1203), ('170418', '1712', 5102), ('170418', '1803', 2), ('170418', '1806', 785), ('170418', '1812', 3015), ('170418', '1906', 100), ('170418', '1912', 100), ('170418', '2006', 0)], [('170421', '1704', 3089), ('170421', '1705', 1710), ('170421', '1706', 377), ('170421', '1707', 265), ('170421', '1709', 1203), ('170421', '1712', 5093), ('170421', '1803', 2), ('170421', '1806', 785), ('170421', '1812', 3275), ('170421', '1906', 100), ('170421', '1912', 100), ('170421', '2006', 0)], [('170420', '1704', 3169), ('170420', '1705', 1635), ('170420', '1706', 382), ('170420', '1707', 265), ('170420', '1709', 1203), ('170420', '1712', 5102), ('170420', '1803', 2), ('170420', '1806', 785), ('170420', '1812', 3015), ('170420', '1906', 100), ('170420', '1912', 100), ('170420', '2006', 0)], [('170411', '1704', 7223), ('170411', '1705', 2144), ('170411', '1706', 735), ('170411', '1707', 271), ('170411', '1709', 1565), ('170411', '1712', 6679), ('170411', '1803', 2), ('170411', '1806', 785), ('170411', '1812', 3015), ('170411', '1906', 100), ('170411', '1912', 100), ('170411', '2006', 0)], [('170424', '1704', 3993), ('170424', '1705', 752), ('170424', '1706', 1130), ('170424', '1707', 5), ('170424', '1709', 512), ('170424', '1712', 1625), ('170424', '1803', 0)], [('170403', '1704', 3454), ('170403', '1705', 526), ('170403', '1706', 116), ('170403', '1707', 0), ('170403', '1709', 511), ('170403', '1712', 1350), ('170403', '1803', 0)], [('170413', '1704', 4221), ('170413', '1705', 688), ('170413', '1706', 271), ('170413', '1707', 5), ('170413', '1709', 512), ('170413', '1712', 1625), ('170413', '1803', 0)], [('170410', '1704', 3768), ('170410', '1705', 676), ('170410', '1706', 260), ('170410', '1707', 5), ('170410', '1709', 512), ('170410', '1712', 1625), ('170410', '1803', 0)], [('170407', '1704', 3725), ('170407', '1705', 672), ('170407', '1706', 260), ('170407', '1707', 3), ('170407', '1709', 512), ('170407', '1712', 1625), ('170407', '1803', 0)], [('170406', '1704', 3732), ('170406', '1705', 649), ('170406', '1706', 262), ('170406', '1707', 3), ('170406', '1709', 512), ('170406', '1712', 1475), ('170406', '1803', 0)], [('170412', '1704', 4934), ('170412', '1705', 1186), ('170412', '1706', 297), ('170412', '1707', 13), ('170412', '1709', 547), ('170412', '1712', 3161), ('170412', '1803', 0)], [('170405', '1704', 979), ('170405', '1705', 461), ('170405', '1706', 13), ('170405', '1707', 8), ('170405', '1709', 35), ('170405', '1712', 1536), ('170405', '1803', 0)], [('170425', '1704', 2013), ('170425', '1705', 583), ('170425', '1706', 28), ('170425', '1707', 9), ('170425', '1709', 36), ('170425', '1712', 1586), ('170425', '1803', 0)], [('170426', '1704', 1167), ('170426', '1705', 152), ('170426', '1706', 615), ('170426', '1707', 15), ('170426', '1709', 0), ('170426', '1712', 1475), ('170426', '1803', 0)], [('170428', '1705', 692), ('170428', '1706', 615), ('170428', '1707', 15), ('170428', '1708', 0), ('170428', '1709', 1), ('170428', '1712', 1475), ('170428', '1803', 0)], [('170427', '1704', 1873), ('170427', '1705', 513), ('170427', '1706', 1121), ('170427', '1707', 15), ('170427', '1709', 0), ('170427', '1712', 1475), ('170427', '1803', 2)]]    
    print sumP
    print '>>>BEGIN COPY'
    gen_dd(sumP)
    print '<<<END COPY'
#     print "['%s', %s]," % ('series', ''.join("'%s'," % v[1] for v in sumC[0]))
#     len1 = len(sumC[0])
#     for a in sorted(sumC):
#         #print "['%s', %s]," % (sumC[0][0][0], ''.join('%d,' % v[2] for v in sumC[0]))
#         print "['%s', %s]," % (a[0][0], ''.join('%d,' % v[2] for v in a[0:len1]))
    cpr = []
    for i in range(len(sumC)):
        for j in range(len(sumC[i])):
            print 
    
    print cpr 
if __name__ == "__main__":
    
    generate_run_config()
    sys.exit()
    
    
    m1 = parse_data(24261, 'https://www.hkex.com.hk/eng/stat/dmstat/dayrpt/hsio170403.htm', 'C')
    m2 = parse_data(24267, 'https://www.hkex.com.hk/eng/stat/dmstat/dayrpt/hsio170407.htm', 'C')
    m3 = parse_data(24263, 'https://www.hkex.com.hk/eng/stat/dmstat/dayrpt/hsio170413.htm', 'C')       
    m4 = parse_data(23924, 'https://www.hkex.com.hk/eng/stat/dmstat/dayrpt/hsio170418.htm', 'C')
    m5 = parse_data(24615, 'https://www.hkex.com.hk/eng/stat/dmstat/dayrpt/hsio170426.htm', 'C')    
    print m1
    print m2
    day_series('24261', m1, True)
    day_series('24267', m2[0:len(m1)])
    day_series('24263', m3[0:len(m1)])
    day_series('23924', m4[0:len(m1)])
    day_series('24615', m5[0:len(m1)])

    n1 = parse_data(24261, 'https://www.hkex.com.hk/eng/stat/dmstat/dayrpt/hsio170403.htm', 'P')
    n2 = parse_data(24267, 'https://www.hkex.com.hk/eng/stat/dmstat/dayrpt/hsio170407.htm', 'P')
    n3 = parse_data(24263, 'https://www.hkex.com.hk/eng/stat/dmstat/dayrpt/hsio170413.htm', 'P')       
    n4 = parse_data(23924, 'https://www.hkex.com.hk/eng/stat/dmstat/dayrpt/hsio170418.htm', 'P')
    n5 = parse_data(24615, 'https://www.hkex.com.hk/eng/stat/dmstat/dayrpt/hsio170426.htm', 'P')   
    print n1
    print n2
    day_series('24261', n1, True)
    day_series('24267', n2[0:len(m1)])
    day_series('24263', n3[0:len(m1)])
    day_series('23924', n4[0:len(m1)])
    day_series('24615', n5[0:len(m1)])
    
    donut(m3[0][1], n3[0][1])
    donut(m4[0][1], n4[0][1])
    donut(m5[0][1], n5[0][1])
    #
    # plot stuff
    #https://jsfiddle.net/t7bvbqk0/1/
    #
    #
    # retrieve historical index data 
    #https://www.google.com/finance/historical?cid=13414271&startdate=Apr+3%2C+2017&enddate=May+1%2C+2017&num=30&ei=p0chWfnMA8yC0AST-5qoCQ
    
#     dd1= map(lambda i:(m02[i][0], m15[i][1]-m02[i][1], "['%s-02', '%s-16', %d]," % (m02[i][0], m02[i][0], m15[i][1])), range(len(m02)))
#     print dd1
#     dd2 = map(lambda x:x[2], dd1)
#     print ''.join(x for x in dd2)
